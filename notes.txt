char *readline (const char *prompt);
-read a line from terminal and return it
-line must be freed after it has been read

void add_history (char *line);
-save line into a history list

void rl_clear_history (void);
-clear history list by deleting all entries;
-frees data that readline saves in history

int rl_on_new_line (void);
tells update functions that we have moved onto a new empty line, usually after outputting newline

void rl_replace_line (const char *text, int clear_undo);
Replace the contents of rl_line_buffer with text. The point and mark are preserved, if possible. 
If clear_undo is non-zero, the undo list associated with the current line is cleared.

void rl_redisplay(void);
Change whatâ€™s displayed on the screen to reflect the current contents of rl_line_buffer.

char * rl_line_buffer
This is the line gathered so far.
You are welcome to modify the contents of the line, but see Allowing Undoing. 

The wait3() and wait4() system calls are similar to waitpid(2), 
but additionally return resource usage information about the child in the structure pointed to by rusage.

printf returns a negative value if there's an error 

