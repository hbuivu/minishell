DON"T FORGET ERRORS: -if you write echo only, if you write unset only, execute
There can only be one global variable. I assume that would be the list of environmental variables
Someone else used the exit code as the global var

Builtins should be executed in parent process unless there are pipes

Special characters cause builtins to work weirdly. Check the subject, but also
look up a list of all special chars and their effects

Builtins can be written in caps or lowercase in any combination

1. echo
-n = do not output the trailing newline
ft_putstring input with newline
if there is -n, do not include the newline
PARSING - if command = echo, take the rest of string as just one string?

2. cd 
int chdir(const char *path)
On success, zero is returned.  
On error, -1 is returned, and errno is set to indicate the error.
changes the current working directory of the calling process to the directory specified in path.


3. pwd 
write to stdout the full path name of current directory
char *getcwd(char *buf, size_t size)
use this function to get current directory
printf the string

4. export
list all currently defined environmental variables in the current shell in alphabetical order
sort all variables in alphabetical order - need a print in alpha order function
join each variable wtih "declare -x PATH" - or just print declare -x and then print the path
ex: declare -x COLORTERM="truecolor"
you can export several variables on the same line
-if the variable doesn't have a value AND IT CURRENTLY DOESN'T EXIST, 
it is set to NULL ('')
-if export variable does not contain a =
the value doesn't change
-otherwise the value is changed each time it's set to something different, including null
hello=$hello:something:something2:something3 ->expand that $to a variable and add the values
hello=something:something2:something3 ->overwrite hello variable
hello="" ->NULL;
hello ->NULL;
hello= ->NULL;
hello=\ -> >
hello=' ->quote> ->basically the value is a heredoc
hello=" ->dquote
-take into account special characters ->they are printed with ' '
-take into account if the val is enclosed in " " or ' ' <- these are not printed output





the export command is used to set an environmental variable in the current shell, making it available to any child process
functionality: malloc and add the string to environmental variables(global var that is set)

5. env
list all environmental variables with /n 
unlike export, it will set or modify environmental variables being used by that command without affecting the shell environmental variable
display same as export
We just have to list the variables though, no args necessary
env changes with cd. Every single time cd is executed, env updates OLDPWD

6. exit N
exits program and returns the exit status of last command (unless N was specified, in which case it returns N)

7.Unset
remove variable or function from current shell environment
you can remove as many variables as needed in the same line
-free string from global var
it would be best to make the global variable a linked list of strings




