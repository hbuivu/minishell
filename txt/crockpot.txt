		//check command for = sign
		split_var = ft_split(command[i], '=');
		//check if the variable already exists
		existing_var = *(data->our_env);
		while (temp)
		{
			if (ft_strcmp(split_line[0], existing_var->var) == 0)
			{
				if (/*check command for = sign*/)
					temp->val = split_line[1];
				break;
			}
			temp = temp->next;
		}
		if (temp == NULL)
			//create node to add to our_env
			//node->var = split_line[0];
			//node->val = split_line[1];
			//attache node to end of our_env
		free(split_line); //use free_splitline function
		i++;
	

	// //expand the whole string of values to the final value string
// char	**expand_val(char *val, t_data *data)
// {
// 	//copy val up until but not including $
// 	//scan $ up until delimiter detected(whatever that is)
// 	//skipping the dollar sign, compare that variable against existing env variables
// 	//if the variable exists
// 		//while values, ft_strjoin values to existing val_str
// 	//continue to copy the value up until the next $
// 	//repeat
// 	char	*final_val;
// 	char	*var_values;
// 	char	*temp;
// 	char	**return_vals;
// 	int		i;
// 	int		j;

// 	final_val = (char *)ft_calloc(ft_strlen(val), sizeof(char));
// 	if (!final_val)
// 		error(data);
// 	while(val[i])
// 	{
// 		if (val[i] != '$')
// 		{
// 			final_val[i] = val[i];
// 			i++;
// 			j++;
// 		}
// 		else
// 		{
// 			var_values = expand_var(val, &i, data);
// 			temp = ft_strjoin(final_val, var_values);
// 			free(final_val);
// 			final_val = temp;
// 		}
// 	}
// 	return_vals = ft_split(final_val, ':');
// 	if (!return_vals)
// 	{
// 		free(final_val);
// 		error(data);
// 	}
// 	free(final_val);
// 	return (return_vals);
// }

// //add value to an already created env_var
// void	parse_values(t_env *env_var, char *val, t_data *data) 
// {
// 	char	**split_val;
// 	t_val	*exist_val;
// 	t_val	*node;
// 	int		i;


// 	i = 0;
// 	exist_val = *(env_var->vals);
// 	if (ft_strchr(val, '$'))
// 		split_val = expand_val(val, data);
// 	else
// 	{
// 		split_val = ft_split(val, ':');
// 		if (!split_val)
// 			error(data);
// 	}
// 	while(exist_val)
// 	{
// 		if (ft_strncmp(exist_val->val, split_val[i], ft_strlen(split_val[i]) + 1) != 0)
// 		{
// 			free(exist_val->val);
// 			exist_val->val = ft_strdup(split_val[i]);
// 			if (!exist_val->val)
// 				error(data);
// 		}
// 		i++:
// 		if (exist_val->next == NULL)
// 			break ;
// 		exist_val = exist_val->next;
// 	}
// 	while (split_val[i])
// 	{
// 		node = (t_val *)ft_calloc(1, sizeof(t_val));
// 		if (!node)
// 			error(data);
// 		node->val = ft_strdup(split_val[i]);
// 		if (!node->val)
// 			error(data);
// 		node->next = NULL;
// 		exist_val->next = node;
// 		i++;
// 		exist_val = exist_val->next;
// 	}
// 	free_strlist(temp_vals);
// }

// void	add_var(char *var, char *val, t_data *data)
// {
// 	//ft_calloc new t_env;
// 	//var = var
// 	//parse_values for this node
// 	//add to the front of the linked list of env variables
// 	t_env	*new_var;

// 	new_var = (t_env *)ft_calloc(1, sizeof(t_env));
// 	if (!new_var)
// 		error(data);
// 	new_var->var = ft_strdup(var);
// 	new_var->val = parse_values(new_var, val, data); 
// 	//add node to the end of env variables
// }

// void	ft_export(t_data *data)
// {
// 	//NOTE: DOES NOT ACCOUNT FOR SPECIAL CHARACTERS
// 	int		i;
// 	char	*split_var;
// 	t_env	*env_var;

// 	i = 1;
// 	if (data->command[i] == NULL)
// 	{
// 		print_export(data);
// 		return ;
// 	}
// 	while (data->command[i])
// 	{
// 		//check command for =
// 		//if no =
// 			//check for existing variable
// 			//if none, add the variable (node)
// 		//if yes =
// 			//split the variable
// 			//check for existing variable
// 				//if existing variable
// 					//change the value if needed
// 				//if not existing variable
// 					//add the variable and value (node)
// 			//free split_variable
// 			//NOTE: this doesnt take into account if the multiple values also have = in them
// 		// find_existing_var should return location of the path
		
// 		if (ft_strchr(data->command[i], '=') == NULL)
// 		{
// 			env_var = find_existing_var(data->command[i], data);
// 			if (!env_var)
// 				add_var(data->command[i], NULL, data);
// 		}		
// 		else
// 		{
// 			split_var = ft_split(data->command[i], '=');
// 			env_var = find_existing_var(split_var[0], data);
// 			if (env_var)
// 				parse_values(env_var, split_var[1], data);
// 			else
// 				add_var(split_var[0], split_var[1], data);
// 			free_strlist(split_var);
// 		}
// 		i++;

// 	}
// }

/* Print values if there is a t_val **list */
// void	print_values(t_val **list, t_data *data)
// {
// 	t_val *cur;

// 	cur = *list;
// 	while (cur)
// 	{
// 		if (cur->next && printf("%s:", cur->val) == -1)
// 			error(data);
// 		else if (!cur->next && printf("%s\n", cur->val) == -1)
// 			error(data);
// 		cur = cur->next;
// 	}
// }

// //vals are a linked list of strings
// //check values by $ and expand all
// //create final temp_vals
// //split final temp_vals by :
// //while there are existing vals, check the new vals and against existing vals and change if necessary
// //if there are still new vals, add nodes
// //make a list of special characters that can't be used as delimiters

// //checks to see if a character is a delimiter. returns 0 if not, 1 if yes
// int	is_delimiter(char c, t_data *data)
// {
// 	int	i;

// 	i = 0;
// 	while (data->delimiters[i])
// 	{
// 		if (c == data->delimiters[i])
// 			return (1);
// 		i++;
// 	}
// 	return (0);
// }

// //expands a variable to values if the variable exists
// char	*expand_var(char *val, int *i, t_data *data)
// {
// 	int		len;
// 	int		counter;
// 	char	*var_name;
// 	t_env	*exist_var;
// 	char	*var_values;
// 	char	*temp;

// 	(*i)++;
// 	counter = *i;
// 	len = 0;
// 	var_values = NULL;
// 	while (!is_delimiter(val[counter], data))
// 	{
// 		counter++;
// 		len++;
// 	}
// 	printf("len: %i\n", len);
// 	var_name = (char *)ft_calloc(len + 1, sizeof(char));
// 	if (!var_name)
// 		error(data);
// 	len = 0; //use a different var
// 	while (!is_delimiter(val[*i], data))
// 	{
// 		var_name[len] = val[*i];
// 		(*i)++;
// 		len++;
// 	}
// 	printf("%s\n", var_name);
// 	exist_var = find_existing_var(var_name, data);
// 	free(var_name);
// 	if (exist_var)
// 	{
// 		var_values = ft_strdup((*exist_var->vals)->val);
// 		(*exist_var->vals) = (*exist_var->vals)->next;
// 		while((*exist_var->vals)->val)
// 		{
// 			temp = ft_strjoin(var_values, (*exist_var->vals)->val);
// 			free(var_values);
// 			var_values = temp;
// 			(*exist_var->vals) = (*exist_var->vals)->next;
// 		}
// 	}
// 	return (var_values);
// }

// /*for t_val*/
// t_val	**create_t_val(char **val, t_data *data)
// {
// 	t_val	**val_list;
// 	t_val	*cur;
// 	t_val	*node;
// 	int		i;

// 	val_list = (t_val **)ft_calloc(1, sizeof(t_val *));
// 	if (!val_list)
// 		error(data);
// 	i = 0;
// 	*val_list = NULL;
// 	while (val[i])
// 	{
// 		node = (t_val *)ft_calloc(1, sizeof(t_val));
// 		if (!node)
// 			error(data);
// 		node->val = ft_strdup(val[i]);
// 		if (!node->val)
// 			error(data);
// 		node->next = NULL;
// 		if (!*val_list)
// 			*val_list = node;
// 		else
// 			cur->next = node;
// 		cur = node;
// 		i++;
// 	}
// 	return (val_list);
// }

// void	print_vals(t_env *node)
// {
// 	if (!node->vals)
// 	{
// 		printf("NULL\n");
// 		return ;
// 	}
// 	t_val *v = *(node->vals);
// 	printf("%s\n", v->val);
// }

// void	init_env(t_data *data, char **envp)
// {
// 	t_env	**env_list;
// 	t_env	*node;
// 	t_env	*cur;
// 	char	**split_var;
// 	char	**split_val;
// 	int		i;

// 	i = -1;
// 	env_list = (t_env **)ft_calloc(1, sizeof(t_env *));
// 	while (envp[++i])
// 	{
// 		node = (t_env *)ft_calloc(1, sizeof(t_env));
// 		split_var = ft_split(envp[i], '=');
// 		split_val = ft_split(split_var[1], ':');
// 		node->var = ft_strdup(split_var[0]);
// 		if (!split_val)
// 			node->vals = NULL;
// 		else
// 			node->vals = create_t_val(split_val, data);
// 		// print_vals(node);
// 		node->next = NULL;
// 		// free(split_var);
// 		// free(split_val);
// 		//we do not free split_val bc we assign it directly to node->val
// 		if (!*env_list)
// 			*env_list = node;
// 		else
// 			cur->next = node;
// 		cur = node;
// 	}
// 	data->env_list = env_list;
// }

// typedef struct s_val
// {
// 	char 			*val;
// 	struct s_val	*next;
// }	t_val;

// typedef struct	s_env
// {
// 	char			*var;
// 	t_val			**vals;
// 	int				p; //for printed
// 	struct s_env	*next;
// }	t_env;

// void	print_our_env(t_env **our_env)
// {
// 	t_env *cur = *our_env;
// 	int	i = -1;;

// 	while (cur)
// 	{
// 		printf("VARIABLE: %s\n", cur->var);
// 		printf("VALUES: ");
// 		if (cur->val == NULL)
// 			printf("(null)");
// 		else
// 			while (cur->val[++i])
// 				printf("%s ", cur->val[i]);
// 		printf("\n");
// 		i = -1;
// 		printf("p: %i\n", cur->p);
// 		cur = cur->next;
// 	}
// }

// void	print_strlist(char **list, t_data *data)
// {
// 	int	i;

// 	i = -1;
// 	while (list[++i])
// 		print_string(1, data, list[i]);
// }

char	*get_cwd(void)
{
	char	*cwd;

	cwd = (char *)ft_calloc_e(PATH_MAX, sizeof(char));
	if (!cwd)
		//return a malloc error and exit program
	getcwd(cwd, PATH_MAX);
		//errno is set so maybe we can use errno?? finally?
		//otherwise just return NULL and take care of the error in the next function
	return (cwd);
}

	// t_env	*env_ptr;

	// init_env(&data, envp);
	// init_delimiters(&data);
	//printf only prints (null) if the string has been allocated???
	// print_our_env(data.our_env);
	
	// print_export(&data);
	// char *str = "PATH=i=1:j=2:k=3";
	// char **buf = split_export(str, &data);
	// for (int i = 0; i < 2; i++)
	// 	printf("%s\n", buf[i]);
	
	// env_ptr = find_existing_var("something", &data);
	// if (env_ptr == NULL)
	// 	printf("This var doesn't exist\n");
	// else
	// 	printf("This var exists: %s\n", env_ptr->var);

	// int i = is_delimiter('=', &data);
	// printf("%i\n", i);
	// ft_export("hello=2", &data);
	// print_export(&data);

	// char *str[4] = {"export", "hello", NULL};

	// ft_echo(str, &data);

	char *str = ft_strdup_lim("echo=2", '=');
	printf("%s\n", str);
	free(str);